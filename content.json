{"meta":{"title":"roseduan的个人博客","subtitle":"roseduan`s blog","description":null,"author":"roseduan","url":"http://roseduan.github.io"},"pages":[{"title":"关于我","date":"2018-11-25T13:39:37.000Z","updated":"2018-11-25T14:30:59.546Z","comments":true,"path":"about/index.html","permalink":"http://roseduan.github.io/about/index.html","excerpt":"","text":"关于我 Java开发者一名，非科班出身，自学编程。喜欢Java、Python语言，热爱数据结构与算法，喜欢捣鼓新的技术，时常关注圈内热点信息。 相信可以通过自身的努力让自己变得更好，更希望在互联网行业走得更深更远。 关于学习 计算机基础是我很重视的内容，计算机系统、数据结构与算法、计算机网络等，都是我长期需要学习的内容。以后的方向：转行大数据。 兴趣爱好 阅读是第一爱好，爱看文学类相关书籍，目前喜欢毛姆的书籍多一些。喜欢写作分享，技术类和感悟类都涉及，博客和公众号是目前主要的写作阵地。爱运动，喜欢足球，C罗忠粉，平时喜欢打网球。 关于城市 在成都上大学，待了四年。最向往的中国城市是上海，想要在上海扎根！ 座右铭 Only the strong survive. 联系我 你可以通过以下方式找到我： Github： https://github.com/roseduan QQ：1952479124 微信公众号："}],"posts":[{"title":"与stormzhang的一次线上面基","slug":"与stormzhang的一次线上面基","date":"2018-11-29T09:38:02.000Z","updated":"2018-11-29T10:17:55.230Z","comments":true,"path":"2018/11/29/与stormzhang的一次线上面基/","link":"","permalink":"http://roseduan.github.io/2018/11/29/与stormzhang的一次线上面基/","excerpt":"","text":"1.现在不用隐瞒了，上次我说的加入了某个星球，其实就是stormzhang的星球。为什么要这样做呢，上次这篇文章已经说到了，对于投资自己，我是不会含糊的。 上周stormzhang在斗鱼上面开了直播，这是他第一次面向球友开直播，我也没有错过这次机会，三个小时的直播，收获还是挺大的。其实我一直都挺怀疑的，因为加入星球能得到什么呢？星主会不会拿钱跑路了？但是基于自己的判断，我还是做出了自认为正确的决定。我一直认为我看人是比较准的，当我看到他的时候，我就知道我的决定应该没错，后面三个小时的交流也证实了这一点。 2.有人问他为什么戾气这么重，是因为赚了很多钱之后很骄傲了吗？他回答说不是的，现在的网络环境很复杂，网民素质参差不齐，戾气重，主要是为了规避一些喷子、杠精等等，因为价值观跟别人不同，没必要去和别人浪费时间。现在很多人在网上表现出来的样子可能和真实生活的样子完全不一样，网上要是看谁不爽了，可以骂他一句傻逼，但是在真实生活中，就算很不喜欢一个人，你也不会当着面骂别人傻逼。 其实我很能理解，当一个人有自己的规划、有自己独立的思想的时候，不会总是花时间去和一些和自己没有必要的联系的人瞎扯，比如一个人老是对你指指点点，在你公众号后台留言骂你，你能怎么办，自己的事情还多呢，哪有功夫闲扯，只能骂他一句傻逼了事。 3.其实后来又说了很多，大多是关于当下的趋势啊，还有关于怎么样去坚持做好一些值得做的事情，比如写作、阅读等","categories":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/categories/无事杂谈/"}],"tags":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/tags/无事杂谈/"}]},{"title":"数据结构与算法——排序（二）","slug":"数据结构与算法——排序（二）","date":"2018-11-29T07:52:06.000Z","updated":"2018-11-29T11:51:51.068Z","comments":true,"path":"2018/11/29/数据结构与算法——排序（二）/","link":"","permalink":"http://roseduan.github.io/2018/11/29/数据结构与算法——排序（二）/","excerpt":"","text":"1.回顾前面说到了冒泡排序，这种算法的思路比较的简单，就是基于两个元素之间的比较，然后交换位置。冒泡排序的平均时间复杂度是O(n2)，空间复杂度是(1)，并且是稳定的排序算法。今天继续讲述另外两种排序算法：选择排序和插入排序。 2.选择排序选择排序的思路是这样的：将要排序的数组分为未排序区间和已排序区间，遍历未排序区间，找到其最小值（或者最大值），将其插入到已排序区间的末尾。依次遍历，直到将未排序区间遍历完，整个排序操作就完成了。我画了一张图来帮助你理解其原理： 相信结合这个图你就不能理解选择排序了，下面是它的代码实现： 1234567891011121314151617181920212223242526/** * @ClassName SelectionSort * @Description 选择排序算法 * @Author roseduan * @Date 2018/11/11 21:01 * @Version 1.0 **/public class SelectionSort &#123; public static void selectionSort(int[] data) &#123; int length = data.length; if (length &lt;= 1) return; for(int i = 0; i &lt; length - 1; i ++) &#123; //查找最小值 int minIndex = i; for(int j = i + 1; j &lt; length; j ++) &#123; if (data[j] &lt; data[minIndex]) minIndex = j; &#125; //交换位置 int temp = data[i]; data[i] = data[minIndex]; data[minIndex] = temp; &#125; &#125;&#125; 综合代码分析，不难看出，选择排序的平均时间复杂度是O(n2)，是一种原地排序算法，空间复杂度是O(1)，那么它和冒泡排序一样，是稳定的排序吗？答案是否定的，选择排序是一种不稳定的排序算法。 因为选择排序每次都要在未排序区间找到最小值，并且和前面的元素交换位置，这样就破坏了稳定性。例如一个数组[3,3,1,7,2]，第一次排序的时候，找到最小值1和第一个3交换，这样两个3的位置就乱了，所以就不稳定了。 3.插入排序插入排序的思路其实和选择排序类似，都是将排序数分为已排序区间和未排序区间，插入排序的具体做法是这样的：依次遍历未排序区间，将未排序区间的数和已排序区间的数组进行比较，将其插入到合适的位置上，保证已排序区间一直都是有序的，遍历完成排序则完成。 结合下面的图来理解一下： 是不是很简单呢？你可以思考一下它的代码实现，然后在参考我下面的代码实现： 12345678910111213141516171819202122232425/** * @ClassName InsertionSort * @Description 插入排序算法 * @Author roseduan * @Date 2018/11/25 20:11 * @Version 1.0 **/public class InsertionSort &#123; public static void insertionSort(int[] data) &#123; int length = data.length; if (length &lt;= 1) return; for(int i = 1; i &lt; length; i ++) &#123; int value = data[i]; int j = i - 1; for(; j &gt;= 0; j --) &#123; if(data[j] &gt; value) data[j + 1] = data[j]; else break; &#125; data[j + 1] = value; &#125; &#125;&#125; 综上分析，插入排序的平均时间复杂度是O(n2)，是一种原地排序算法，空间复杂度是O(1)，那么它是稳定的吗？我们来分析一下：结合上面的代码，只有当data[j] &gt; value的时候，才会交换两个元素的位置，所以这并不会破坏稳定性，例如一个数组[1,3,3,7,5]，5和7交换了位置之后，由于5&gt;3，所以并不会继续交换位置。所以我们可以得知：插入排序是稳定的排序算法。 4.总结好了，三种基本的排序算法都已经学完了，针对其是否稳定，时间复杂度等性质，我总结了一下： 其实这三种排序算法在实际的开发场景中用的并不多，因为时间复杂度较高，只适用于小规模的数据排序。但是你可以自己实现一下，锻炼一下自己的思维和编码能力。下一次讲讲述更常用的归并排序和快速排序。","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://roseduan.github.io/categories/数据结构与算法/"}],"tags":[{"name":"选择排序","slug":"选择排序","permalink":"http://roseduan.github.io/tags/选择排序/"},{"name":"插入排序","slug":"插入排序","permalink":"http://roseduan.github.io/tags/插入排序/"}]},{"title":"为什么我说看文档是最快捷有效的学习方式？","slug":"为什么我说看文档是最快捷有效的学习方式","date":"2018-11-27T08:32:56.000Z","updated":"2018-11-29T07:51:05.637Z","comments":true,"path":"2018/11/27/为什么我说看文档是最快捷有效的学习方式/","link":"","permalink":"http://roseduan.github.io/2018/11/27/为什么我说看文档是最快捷有效的学习方式/","excerpt":"","text":"1.以前我学习一门新技术的时候，总会有一个习惯的动作，那就是打开浏览器，百度搜索“xxx教程”，然后在众多列表里面寻找自己认为质量还不错的教程。 但是这样有一个很大的问题，那就是时间成本较高。我很难在短时间内快速的寻找到自己想要看到的内容，因为搜索出来的内容参差不齐，大部分是CSDN、博客园上面的博客，有的是简书、知乎等等乱七八糟的网站链接。在没有长时间的经验积累下，我就会一个一个挨着打开，然后浏览一遍内容，然后返回打开下一个……所以我说这样做的时间成本是很高的。 还有，在我刚入门的时候，比如学Java基础，总是喜欢看视频来学习，但是网上的视频资源太多了怎么办？那就需要花时间来寻找适合的教程，百度一搜，也是很多东西。现在看来，网上关于基础内容的一些教学视频大多讲得非常得啰嗦，经常性的聊一些无关的内容，我觉得这样太浪费时间了。 2.后来我发现，其实学习到的很多技术，比如Redis，Solr，SSM，Git等等，在其官方网站上面都会有详细的参考文档，这都是官方开发人员的总结教程，比较的权威，十分适合快速入门新的技术。还有一大优点是不用花时间去寻找，一般在官网的首页就能看到。但有一个很大的问题就是这些文档绝大部分都是英文的，并且我也不建议你直接鼠标右键然后翻译成简体中文，因为这种翻译的效果太差了。于是这样一道门槛把很多人都拦住了。 其实我也是这样的，看到长篇大论的英文，的确很头痛，索性放弃，去寻找其他的教程。但是后来我想，我非科班出身，起点本来就比别人低，要是还按照常规的套路，进步岂不是太慢了？所以我只能硬着头皮看官方英文文档了，刚开始肯定痛苦，但是经验积累多了，慢慢的就会好很多，顺便也能提高一下自己的英文水平，何乐而不为呢。 同理，对于学习一些较为系统的内容，比如编程语言Java、Python等，网上很难找到系统的文字教程。所以我推荐看书，虽然花点钱，但是效率高很多了，省去了寻找教学视频的时间和教学视频讲师瞎BB的时间。如果连一本书都没有耐心看下去的话，我也并不认为干其他的事情会有耐心。 3.但是对于刚入门的人来说，书上的有些内容的确很难理解，必须要视频讲授帮助理解。这种情况，看视频还是可以的，但是记住一点，那就是免费的视频大多是垃圾。遇到问题，需要借助搜索解决，那么我不推荐百度，因为百度出来的内容大部分质量堪忧，倒不如花点钱买个VPN上Google。记住一点，如果一个问题能够花钱这种方式来解决，那么这种方式一定是最好的。","categories":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/categories/无事杂谈/"}],"tags":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/tags/无事杂谈/"}]},{"title":"数据结构与算法——-排序（一）","slug":"数据结构与算法——排序（一）","date":"2018-11-25T14:20:39.000Z","updated":"2018-11-27T09:38:25.461Z","comments":true,"path":"2018/11/25/数据结构与算法——排序（一）/","link":"","permalink":"http://roseduan.github.io/2018/11/25/数据结构与算法——排序（一）/","excerpt":"","text":"1.导言因为这是排序算法系列的第一篇文章，所以多啰嗦几句。 排序是很常见的算法之一，现在很多编程语言都集成了一些排序算法，比如Java 的Arrays.sort()方法，这种方式让我们可以不在乎内部实现细节而直接调用，在实际的软件开发当中也会经常使用到。但是站在开发者的角度而言，知其然必须知其所以然。多练练排序算法，不仅能够让我们知道一些排序方法的底层实现细节，更能够锻炼我们的思维，提升编程能力。现在很多技术面试也会涉及到基本的排序算法，所以多练习是有好处的。 文中涉及到的代码都是Java实现的，但是不会涉及到太多的Java语言特性，并且我会加上详细的注释，帮助你理解代码并且转换成你熟悉的编程语言。 常见的排序算法有以下10种： 冒泡排序、选择排序、插入排序，平均时间复杂度都是O(n2) 希尔排序、归并排序、快速排序、堆排序，平均时间复杂度都是O(nlogn) 计数排序、基数排序、桶排序，平均时间复杂度都是O(n + k) 在开始具体的排序算法讲解之前，先得明白两个概念： 原地排序：指的是在排序的过程当中不会占用额外的存储空间，空间复杂度为O(1)。 排序算法的稳定性：一个稳定的排序，指的是在排序之后，相同元素的前后顺序不会被改变，反之就称为不稳定。举个例子：一个数组[3，5，1，4，9，6，6，12]有两个6（为了区分，我把一个6加上了下划线），如果排序之后是这样的：[1，3，4，5，6，6，9，12]（加下划线的6仍然在前面），就说明这是一个稳定的排序算法。 2.言归正传冒泡排序的思路其实很简单，一个数据跟它相邻的数据进行大小的比较，如果满足大小关系，就将这两个数据交换位置。一直重复这个操作，就能将数据排序。 举个例子，假如有数组a[3,5,1,4,9,6]，第一次冒泡的操作如下图所示： 重复进行这个操作，6次冒泡之后，数据排序完成。 根据这个思路，你很容易能够写出下面的代码实现冒泡排序： 12345678910111213141516171819public class BubbleSort &#123; //data表示整型数组，n表示数组大小 public static void bubbleSort(int[] data, int n)&#123; //数组大小小于等于1，无须排序，返回空 if (n &lt;= 1) return; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; n - i - 1; j++) &#123; //如果data[j] &gt; data[j + 1]，交换两个数据的位置 if (data[j] &gt; data[j + 1])&#123; int temp = data[j]; data[j] = data[j + 1]; data[j + 1] = temp; &#125; &#125; &#125; &#125;&#125; 但是这个排序算法还可以进行优化，当冒泡操作已经没有数据交换的时候，说明排序已经完成，就不用在进行冒泡操作了。例如上面的例子，第一次冒泡之后，数据为[3,1,4,5,6,9]，再进行一次冒泡，数据变为[1,3,4,5,6,9]，此时已经完成了排序，就可以结束循环了。 所以针对这个数组的排序，上面的代码需要6次冒泡才能完成，其中有4次都是不需要的。所以可以对代码进行优化： 12345678910111213141516171819202122232425public class BubbleSort &#123; //优化后的冒泡排序 //data表示整型数组，n表示数组大小 public static void bubbleSort(int[] data, int n)&#123; //数组大小小于等于1，无须排序，返回空 if (n &lt;= 1) return; for (int i = 0; i &lt; n; i++) &#123; boolean flag = false;//判断是否有数据交换 for (int j = 0; j &lt; n - i - 1; j++) &#123; //如果data[j] &gt; data[j + 1]，交换两个数据的位置 if (data[j] &gt; data[j + 1])&#123; int temp = data[j]; data[j] = data[j + 1]; data[j + 1] = temp; flag = true;//表示有数据交换 &#125; &#125; //如果没有数据交换，则直接退出循环 if (!flag) break; &#125; &#125;&#125; 好了，冒泡排序的基本思路和代码都已经实现，最后总结一下： 冒泡排序是基于数据比较的 最好情况时间复杂度是O(n)，最坏情况时间复杂度是O(n2)，平均时间复杂度是O(n2) 冒泡排序是原地排序算法，并且是稳定的。","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://roseduan.github.io/categories/数据结构与算法/"}],"tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://roseduan.github.io/tags/排序算法/"}]},{"title":"培训机构的小姐姐是如何说服你的","slug":"培训机构的小姐姐是如何说服你的","date":"2018-11-21T08:48:27.000Z","updated":"2018-11-24T09:28:39.463Z","comments":true,"path":"2018/11/21/培训机构的小姐姐是如何说服你的/","link":"","permalink":"http://roseduan.github.io/2018/11/21/培训机构的小姐姐是如何说服你的/","excerpt":"","text":"1.秋招已经接近尾声，我在成都也已经找了好多家公司面试了，但都不是很顺利。归根结底，还是自己的技术能力不够吧，在有了生存的压迫之下，自己的学习才能够有紧迫性，希望抓紧时间。但是今天我主要想说的确实另外的一件事。 2.前天到一家公司面试，说起奇怪，这家公司的地址给我的感觉跟其他的不一样，我以前面试的公司一般都是在某个写字楼，但是这家公司在一个较为低矮的房子里。我一走进去，就能看见每一层楼梯都写着“……教育，专注于培养专业技术人才……”，那一刻我就明白了，原来这公司是培训机构！ 那天还早，我又没有其他的地方可去，所以我索性就直接进去看看了。果不其然，里面有很多教室，有很多人正在上课。我跟其他的几个人在一起听了他们对公司的介绍，然后一个自称技术经理的人说要带着我们花三天时间做一个小的项目，算是对我们的一个技术检验。如果通过，就可以直接推荐去公司。 但是我下午还有其他的面试，我不打算在那里多待，就给负责人说了我下午要走。负责人说既然这样的话，那我就直接给你安排技术面试吧。我心想还不错啊，技术面试要是过了的话，就可以直接去公司了。结果，她所说的技术面试就是安排一个人给你洗脑，让你去他们的培训。 3.我很无语啊，我就这样不明所以的和她聊了一个多小时，大多数时候都是她在说。后来我总结了一下，她的套路基本上是这样的： 首先她知道，我最近在找工作，而且还不太顺利，然后她就拿出了他们的培训课程体系让我看看，我说大部分我都是学过的，但都不是很精通，有些还没学过呢。她就介绍他们的课程怎么怎么好，老师多么专业，而且他们现在还在做十二周年活动，这个月报名的话，费用会比平时少很多。但是这种套路我很熟悉了，别说这个月了，就算明年你再去报名，费用还是可以商量的。 然后她会给你说他们这里的学生的就业情况，拿到的工资基本上都是8K，9K，10K以上的，而且大部分都是非计算机专业，零基础前来培训的。她就会说，你是计算机专业的，有这方面的基础，在这里培训几个月，把自己的技术弄扎实，毕业的时候在找个好工作，完全是没问题的。 然后她会拿出他们学员跟她的微信聊天记录，基本都是就业工资的问题，让你明确她说的是没错的。她还会举几个特里来刺激你，比如某个非计算机专业的女生，学Java开发，零基础，就业工资18K，听起来实在是很诱人。她说人家一个女生都能取得这样的成就，那么一个男生就更加没有理由犹豫了。 还有的特例，比如说有个学员已经找到了工作，但是主动辞职前来培训，主要是想把自己的技术在巩固一下。所以她就给你说，就算你现在运气好，找到了一个实习的工作，但是你的压力会特别的大，这样工作下去，你的技术等各方面的能力是很难有长进的。 现在的培训机构很聪明了，都是打着招聘的幌子把你忽悠过去，然后就指出你的技术方面的问题，然后就给你洗脑。其实我心里并没有很讨厌给我稀里糊涂讲了一大堆的那位工作人员，毕竟这也是别人的工作，我得尊重一个努力对待自己工作的人，但是很可惜，她找错目标对象了。 其实我心里对培训机构并不排斥，因为这也是一条出路，不然就不会有那么多的培训机构产生了。 4.我在那里还遇到一个人，他是前来了解IT这行业的。跟他简单聊了几句，才知道他是12年毕业的，这几年没怎么工作，又没有什么一技之长，所以对未来十分的迷茫。他想从事开发方面的工作，但是又碍于各种因素而畏手畏脚，比如年纪比较大了，学习的难度可能比较高等等。在他的眼里，我看到了迷茫、不知所措和对未来的恐惧。的确，在这个竞争日益激烈的社会，自身硬实力是生存下去的根本，还有认准行业很重要，俗话说，站在趋势的风口下，猪都会飞！","categories":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/categories/无事杂谈/"}],"tags":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/tags/无事杂谈/"}]},{"title":"报到贴","slug":"报到贴","date":"2018-11-19T13:40:09.000Z","updated":"2018-11-22T15:04:24.393Z","comments":true,"path":"2018/11/19/报到贴/","link":"","permalink":"http://roseduan.github.io/2018/11/19/报到贴/","excerpt":"","text":"1.说来惭愧，在去年的这个时候，我就已经想要搭建自己的博客了，并且折腾了一天，基本上完成了初步的搭建。但是我并没有使用起来，这个博客也就荒废在这里了。大概一年之后，可能是外部因素的刺激，也可能是自身的觉悟使然，让我又重新搭建起自己的博客。浪费了一年时间之后，有一种悔不当初的复杂心情，也有重新来过的轻快愉悦，在这里，我写下roseduan的个人博客的第一篇文章。 2.前段时间，我看到了公众号【码农翻身】里面的一篇文章，里面有说到写作对于一个程序员有多么的重要。具体的内容不必赘述，只想阐述其中的一点： 一个知识点学没学透彻，一个很有效的判断的方法就是你能不能够向别人讲述清楚这个知识点。很多时候，我们在学习的时候，知识在内心有个大致的概念，感觉自己弄懂了，但是要你自己表述出来，我们常常感到很困难，这就说明我们其实并没有彻底弄懂这个知识。那该怎么办，我们总不能老是拿别人来做自己的知识练习对象，‘哎哎，我今天学了数据库，我给你讲讲吧！’，刚开始别人可能还有兴趣听一听，但是长此以往没有人受得了。 所以，写作的优势就能够体现出来了。写作逼着你去思考，去总结，去想怎么把这个问题说明白。其实这就直接锻炼了我们的文字组织能力和语言表达能力。 以上，是近期直接导致我想要重新开始写博客的原因，因为这个观点戳中了我内心最真实的想法。长期以来，我接触到的这方面的东西实在不少，总是建议我们应该写作，应该坚持下去。但是碍于自己的写作意识不够和不能够更好坚持下去的缘由，我迟迟未能在这一片天地开拓出自己的空间，但现在，是时候了。 3.互联网时代的好处之一便是将一些远在天边的人和自己以某种方式相联系，让我能够从中学习到别人身上的优点，看到别人的光环，并知道别人是怎么做到这一切的。我很幸运的能够接触到一些行业内的比较厉害的人，跟我类似的也大有人在：非科班出身，自学编程，成为行业大牛，互联网大V。我从这些人身上看到了很多共同的优点，其中之一便是长期坚持写作。虽说我跟他们的差距非常的大，但这并不妨碍我在心中播下梦想的种子，因为有期待就有前进的动力。 4.我的写作经验大都是在我的公众号【roseduan】上面积累的，但是更新连续性并不是很好，经常出现较长时间的停更。而且这上面都是非技术性的文章，所以只要脑子没有打开，没有新的思考的话，就比较难长时间的更新。但是我不会放弃的，公众号与博客，将是我长期写作的地方。困难将可以预见，那就是我能不能长时间的坚持下去，还有就是初期的写作不会博得太多的关注，还有以后的时间安排问题。这些困难基本上是每个人都会遇到的，有的人中途放弃了，有的人挺下来了，这也是考验一个人最直接的方式吧。 5.我大四了，在学校已经没有课程了，仅剩的任务便是毕业论文，可以说我的大学生活基本上结束了。在不久的以后面临的便是社会的考验和职场的洗礼。对于技术人来说，初入职场需要注意些什么，需要培养哪些软技能，我已经听说了不少，无非是写作、英语、演讲、投资理财等等，却没有机会实际的感触一下。但是在大学期间从写作开始，我觉得很不错了。 ​","categories":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/categories/无事杂谈/"}],"tags":[{"name":"无事杂谈","slug":"无事杂谈","permalink":"http://roseduan.github.io/tags/无事杂谈/"}]}]}